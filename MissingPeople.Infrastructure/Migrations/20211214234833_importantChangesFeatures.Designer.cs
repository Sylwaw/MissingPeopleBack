// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MissingPeople.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MissingPeople.Infrastructure.Migrations
{
    [DbContext(typeof(MissingPeopleDbContext))]
    [Migration("20211214234833_importantChangesFeatures")]
    partial class importantChangesFeatures
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictBodyShape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("DictBodyShapes");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("CordinateX")
                        .HasColumnType("double precision");

                    b.Property<double>("CordinateY")
                        .HasColumnType("double precision");

                    b.Property<int>("IdentifierTeryt")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProvincesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvincesId");

                    b.ToTable("DictCities");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictDetailFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DictFeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictFeatureId");

                    b.ToTable("DictDetailFeatures");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictEye", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("DictEyes");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("DictFeatures");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictHair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("DictHairs");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictProvince", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictProvinces");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.DangerOfLife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAtRisk")
                        .HasColumnType("boolean");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("DangersOfLife");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Features.DetailFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DictDetailFeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("FeatureID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DictDetailFeatureId")
                        .IsUnique();

                    b.HasIndex("FeatureID");

                    b.ToTable("DetailFeatures");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Features.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.LastLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("LastLocations");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfDisappear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsWaiting")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.PersonDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClothesDescription")
                        .HasColumnType("text");

                    b.Property<int>("HeightFrom")
                        .HasColumnType("integer");

                    b.Property<int>("HeightTo")
                        .HasColumnType("integer");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("ScarsDescription")
                        .HasColumnType("text");

                    b.Property<string>("TatoosDescription")
                        .HasColumnType("text");

                    b.Property<int>("WeightFrom")
                        .HasColumnType("integer");

                    b.Property<int>("WeightTo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PeopleDetails");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictBodyShape", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Features.Feature", "Feature")
                        .WithMany("DictBodyShapes")
                        .HasForeignKey("FeatureId");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictCity", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Dictionaries.DictProvince", "Provinces")
                        .WithMany("Cities")
                        .HasForeignKey("ProvincesId");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictDetailFeature", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Dictionaries.DictFeature", null)
                        .WithMany("DictDetailFeatures")
                        .HasForeignKey("DictFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictEye", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Features.Feature", null)
                        .WithMany("DictEyes")
                        .HasForeignKey("FeatureId");

                    b.HasOne("MissingPeople.Core.Entities.Peoples.Person", "Person")
                        .WithOne("DictEye")
                        .HasForeignKey("MissingPeople.Core.Entities.Dictionaries.DictEye", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictFeature", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Features.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictHair", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Features.Feature", "Feature")
                        .WithMany("DictHairs")
                        .HasForeignKey("FeatureId");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.DangerOfLife", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Person", "Person")
                        .WithOne("DangerOfLife")
                        .HasForeignKey("MissingPeople.Core.Entities.Peoples.DangerOfLife", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Features.DetailFeature", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Dictionaries.DictDetailFeature", "DictDetailFeature")
                        .WithOne("DetailFeature")
                        .HasForeignKey("MissingPeople.Core.Entities.Peoples.Features.DetailFeature", "DictDetailFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MissingPeople.Core.Entities.Peoples.Features.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictDetailFeature");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Features.Feature", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.LastLocation", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Dictionaries.DictCity", "City")
                        .WithMany("LastLocations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MissingPeople.Core.Entities.Peoples.Person", "Person")
                        .WithOne("LastLocation")
                        .HasForeignKey("MissingPeople.Core.Entities.Peoples.LastLocation", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.PersonDetail", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Person", "Person")
                        .WithOne("Detail")
                        .HasForeignKey("MissingPeople.Core.Entities.Peoples.PersonDetail", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Picture", b =>
                {
                    b.HasOne("MissingPeople.Core.Entities.Peoples.Person", "Person")
                        .WithMany("Pictures")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictCity", b =>
                {
                    b.Navigation("LastLocations");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictDetailFeature", b =>
                {
                    b.Navigation("DetailFeature");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictFeature", b =>
                {
                    b.Navigation("DictDetailFeatures");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Dictionaries.DictProvince", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Features.Feature", b =>
                {
                    b.Navigation("DictBodyShapes");

                    b.Navigation("DictEyes");

                    b.Navigation("DictHairs");
                });

            modelBuilder.Entity("MissingPeople.Core.Entities.Peoples.Person", b =>
                {
                    b.Navigation("DangerOfLife");

                    b.Navigation("Detail");

                    b.Navigation("DictEye");

                    b.Navigation("LastLocation");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
